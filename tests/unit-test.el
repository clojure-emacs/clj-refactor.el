(require 'paredit)
(require 'clj-refactor)

(describe "completable-for-cljr-slash?"
  (it "Returns `t' for tokens that can represent alias-prefixed named things (symbols, keywords, metadata)"
    (expect (completable-for-cljr-slash? nil) :to-be nil)
    (dolist (prefix '("" "^" "^::"))
      (expect (completable-for-cljr-slash? (concat prefix "a")) :to-be t)
      (expect (completable-for-cljr-slash? (concat prefix "a-")) :to-be t)
      (expect (completable-for-cljr-slash? (concat prefix "a2")) :to-be t)
      (expect (completable-for-cljr-slash? (concat prefix "a-2")) :to-be t)
      (expect (completable-for-cljr-slash? (concat prefix "a2-")) :to-be t)
      (expect (completable-for-cljr-slash? (concat prefix "a2.a")) :to-be t)
      (expect (completable-for-cljr-slash? (concat prefix "a2.a-")) :to-be t)
      (expect (completable-for-cljr-slash? (concat prefix "a2.a2")) :to-be t)
      (expect (completable-for-cljr-slash? (concat prefix "a2.a-2")) :to-be t)
      (expect (completable-for-cljr-slash? (concat prefix "a2.a2-")) :to-be t)
      (expect (completable-for-cljr-slash? (concat prefix "a2.a.")) :to-be nil)
      (expect (completable-for-cljr-slash? (concat prefix "a2.2")) :to-be nil)
      (expect (completable-for-cljr-slash? (concat prefix "a2.2a")) :to-be nil)
      (expect (completable-for-cljr-slash? (concat prefix "a2.-")) :to-be nil)
      (expect (completable-for-cljr-slash? (concat prefix "a2.-a")) :to-be nil)
      (expect (completable-for-cljr-slash? (concat prefix "-")) :to-be nil)
      (expect (completable-for-cljr-slash? (concat prefix ".")) :to-be nil)
      (expect (completable-for-cljr-slash? (concat prefix "2")) :to-be nil)
      (expect (completable-for-cljr-slash? (concat prefix "+")) :to-be nil)
      (expect (completable-for-cljr-slash? (concat prefix "+")) :to-be nil)
      (expect (completable-for-cljr-slash? (concat prefix "a/")) :to-be nil)
      (expect (completable-for-cljr-slash? (concat prefix "a/a")) :to-be nil)
      (expect (completable-for-cljr-slash? (concat prefix "a/a/")) :to-be nil))))
